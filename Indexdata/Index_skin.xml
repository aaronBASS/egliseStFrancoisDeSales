<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Open a website -->


  <style name="IconOpenawebsite"
         url="%FIRSTXML%/spots/info_user_defaultpoint4_user_defaultpoint4.png"
         visible="false"
         edge="center"
         zoom="true"

         onhover="onhoverIconOpenawebsite"
         onover="onoverIconOpenawebsite"
         onout="onoutIconOpenawebsite"

         height="35"
         width="35"
         />
  <action name="onhoverIconOpenawebsite">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconOpenawebsite">
tween(scale, 1.2);


  </action>
  <action name="onoutIconOpenawebsite">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - Load panorama -->


  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint5.png"
         visible="false"
         edge="center"
         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"


         />
  <action name="onhoverIconLoadpanorama">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>



        
  <!-- Video Spot Style - Default Video Spot Style -->
  <style name="RectVideoDefaultVideoSpotStyle"
         capture="false"
         visible="false"
         distorted="true"
         scale="1.0"
         url="%SWFPATH%/graphics/videoplayer.swf"
         alturl="%FIRSTXML%/graphics/videoplayer.js"
         loop="false"
         autoresume="true"
         pausedonstart="true"
         pausedonstart.android="false"
         pauseothersounds="false"
         canstart="false"
         onvideocomplete="tween(alpha, 0, 0.5, easeOutQuad, if(device.html5,stop();,delayedcall(0.01,play();pause();););set(hotspot[get(videocontrolplay)].visible, true);set(hotspot[get(videocontrolpause)].visible, false);set(stateVideo,'startplaying'););"
         onhover="onhoverRectVideoDefaultVideoSpotStyle"
         onout="onoutRectVideoDefaultVideoSpotStyle"
         onvideoready="onvideoreadyRectVideoDefaultVideoSpotStyle"
         />
  <style name="RectVideoDefaultVideoSpotStyle" 
    directionalsound="true" 
    range="90" 
    devices="flash" 
  />
  <style name="RectVideoDefaultVideoSpotStyle" 
    directionalsound="false" 
    devices="html5" 
  />
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startplaying" devices="no-ios"/>
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startpaused"  devices="ios"   />
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startplaying" devices="ios10" />
  <action name="onhoverRectVideoDefaultVideoSpotStyle">
    showTooltip('hotspot');
    if(hotspot[get(videocontrolpause)].visible == false,
      if(hotspot[get(videocontrolplay)].visible == false,
        set(hotspot[get(videocontrolpause)].visible, true);
      );
    );
  </action>
  <action name="onoutRectVideoDefaultVideoSpotStyle">
    hideTooltip();
    ifnot(ispaused,
      if(hotspot[get(videocontrolpause)].visible,
        set(hotspot[get(videocontrolpause)].visible, false);
      );
    );
  </action>
  <action name="onvideoreadyRectVideoDefaultVideoSpotStyle">
    set(isVideoReadyForPlaying, false);
    if (isvideoready,
      if(panovideospotsstate,set(canstart, true););
      if (canstart,
        set(isVideoReadyForPlaying, true);
      );
    );
    if(isVideoReadyForPlaying,

    if(tour_displayspots,
      if(ispaused,
        if(stateVideo == "startplaying",
          set(stateVideo, "playing");
          play();
        );
      );
    );
    if(device.flash OR (device.webgl AND !device.ios),
      if (tour_soundson,
        div(volume, tour_soundsvolume, 100);
      ,
        set(volume, 0);
      );
    ,
      ifnot(device.ios,
        if (tour_soundson,
          js(kpanotour.Sounds.startVideosSounds(get(volume)));
        ,
          js(kpanotour.Sounds.stopVideosSounds());
        );
      ,
        if (tour_soundson,
          set(muted, false);
        ,
          set(muted, true);
        );
      );
    );
    onvideoreadycontrols();
    ,

      delayedcall(0.5,onvideoreadyRectVideoDefaultVideoSpotStyle());
    );
  </action>



    
  <!-- Spot Style - ArrowUp 1 -->


  <style name="IconArrowUp1"
         url="%FIRSTXML%/spots/arrowup_user_defaultpoint10_user_defaultpoint3.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconArrowUp1"
         onover="onoverIconArrowUp1"
         onout="onoutIconArrowUp1"

         height="70"
         width="70"
         />
  <action name="onhoverIconArrowUp1">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconArrowUp1">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconArrowUp1">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - Jesus3D_40px -->


  <style name="IconJesus3D-40px"
         url="%FIRSTXML%/spots/_3dcube_user_defaultpoint8_user_defaultpoint8.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconJesus3D-40px"
         onover="onoverIconJesus3D-40px"
         onout="onoutIconJesus3D-40px"

         height="40"
         width="40"
         />
  <action name="onhoverIconJesus3D-40px">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconJesus3D-40px">
tween(scale, 1.2);


  </action>
  <action name="onoutIconJesus3D-40px">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - ArrowLeft -->


  <style name="IconArrowLeft"
         url="%FIRSTXML%/spots/arrowleft_user_defaultpoint9_user_defaultpoint9.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconArrowLeft"
         onover="onoverIconArrowLeft"
         onout="onoutIconArrowLeft"

         height="35"
         width="35"
         />
  <action name="onhoverIconArrowLeft">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconArrowLeft">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconArrowLeft">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - ArrowUp -->


  <style name="IconArrowUp"
         url="%FIRSTXML%/spots/arrowup_user_defaultpoint10_user_defaultpoint10.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconArrowUp"
         onover="onoverIconArrowUp"
         onout="onoutIconArrowUp"

         height="35"
         width="35"
         />
  <action name="onhoverIconArrowUp">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconArrowUp">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconArrowUp">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - ArrowDown -->


  <style name="IconArrowDown"
         url="%FIRSTXML%/spots/arrowdown_user_defaultpoint11_user_defaultpoint11.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconArrowDown"
         onover="onoverIconArrowDown"
         onout="onoutIconArrowDown"

         height="35"
         width="35"
         />
  <action name="onhoverIconArrowDown">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconArrowDown">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconArrowDown">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - SpotUp -->


  <style name="IconSpotUp"
         url="%FIRSTXML%/spots/arrowup_user_defaultpoint10_user_defaultpoint12.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconSpotUp"
         onover="onoverIconSpotUp"
         onout="onoutIconSpotUp"

         height="30"
         width="30"
         />
  <action name="onhoverIconSpotUp">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconSpotUp">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconSpotUp">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - ArrowRight -->


  <style name="IconArrowRight"
         url="%FIRSTXML%/spots/arrowright_user_defaultpoint13_user_defaultpoint13.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconArrowRight"
         onover="onoverIconArrowRight"
         onout="onoutIconArrowRight"

         height="35"
         width="35"
         />
  <action name="onhoverIconArrowRight">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconArrowRight">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconArrowRight">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - Display a video 1 -->


  <style name="IconDisplayavideo1"
         url="%FIRSTXML%/spots/plus_user_defaultpoint7_user_defaultpoint14.png"
         visible="false"
         edge="center"
         zoom="true"

         onhover="onhoverIconDisplayavideo1"
         onover="onoverIconDisplayavideo1"
         onout="onoutIconDisplayavideo1"

         height="15"
         width="15"
         />
  <action name="onhoverIconDisplayavideo1">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconDisplayavideo1">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconDisplayavideo1">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



    
  <!-- Spot Style - 3D_Religieuse -->


  <style name="Icon3D-Religieuse"
         url="%FIRSTXML%/spots/_3dcube_user_defaultpoint8_user_defaultpoint15.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIcon3D-Religieuse"
         onover="onoverIcon3D-Religieuse"
         onout="onoutIcon3D-Religieuse"

         height="25"
         width="25"
         />
  <action name="onhoverIcon3D-Religieuse">
    showtooltip('hotspot');
  </action>
  <action name="onoverIcon3D-Religieuse">
tween(scale, 1.2);


  </action>
  <action name="onoutIcon3D-Religieuse">
    hideTooltip();
    tween(scale, 1);


  </action>



    
  <!-- Spot Style - Jesus3D_25px -->


  <style name="IconJesus3D-25px"
         url="%FIRSTXML%/spots/_3dcube_user_defaultpoint8_user_defaultpoint16.png"
         visible="false"
         edge="center"
         zoom="true"

         onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconJesus3D-25px"
         onover="onoverIconJesus3D-25px"
         onout="onoutIconJesus3D-25px"

         height="25"
         width="25"
         />
  <action name="onhoverIconJesus3D-25px">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconJesus3D-25px">
tween(scale, 1.2);


  </action>
  <action name="onoutIconJesus3D-25px">
    hideTooltip();
    tween(scale, 1);


  </action>



<!-- ********** -->
<!-- Previous/Next Strips -->
<!-- id : prevnexttheme2 -->
<!-- ********** -->

  <style name="prevnexttheme2btn_alpha_style" 
    alpha="0.0" onover="set(alpha, 1);" onout="set(alpha, 0.0);"
    devices="desktop"
  />
  <style name="prevnexttheme2btn_alpha_style" 
    alpha="1.0"
    devices="tablet.or.mobile"
  />
  <layer name="prevnexttheme2btn_prev_pano" keep="true" align="left"
         height="102%"
         width="5%"
         type="container"
         bgcapture="true"
         bgalpha="0.20000000000000001"
         bgcolor="0xeeeeee"
         zorder="1"
         onclick="loadPreviousScene();
"
         style="prevnexttheme2btn_alpha_style"
         visible="false">
    <layer name="prevnexttheme2prevPanoramaArrow" keep="true" align="center"
         url="%FIRSTXML%/graphics/prevnextstrips/btn_scroll_left.png"
         alpha="1"
         zorder="0"
         onclick="loadPreviousScene();
"
    />
  </layer>

  <layer name="prevnexttheme2btn_next_pano" keep="true" align="right"
         height="102%"
         width="5%"
         type="container"
         bgcapture="true"
         bgalpha="0.20000000000000001"
         bgcolor="0xeeeeee"
         zorder="1"
         onclick="loadNextScene();
"
         style="prevnexttheme2btn_alpha_style"
         visible="false">
    <layer name="prevnexttheme2nextPanoramaArrow" keep="true" align="center"
         url="%FIRSTXML%/graphics/prevnextstrips/btn_scroll_right.png"
         alpha="1"
         zorder="0"
         onclick="loadNextScene();
"
    />
  </layer>

  <events name="prevnexttheme2hideshowcontrolsevent" 
    onTourStart="prevnexttheme2showPrevNextControls();"
    keep="true"/>
  <action name="prevnexttheme2hidePrevNextControls">
    set(layer[prevnexttheme2btn_prev_pano].visible, false);
    set(layer[prevnexttheme2btn_next_pano].visible, false);
  </action>
  <action name="prevnexttheme2showPrevNextControls">
    set(layer[prevnexttheme2btn_prev_pano].visible, true);
    set(layer[prevnexttheme2btn_next_pano].visible, true);
  </action>


<!-- ********** -->
<!-- Double Click -->
<!-- id : doubleclick -->
<!-- ********** -->

  <plugin name="doubleclick" url.flash="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" url.html5="%FIRSTXML%/graphics/doubleclick/dctouch.min.js" keep="true" ondblclick="doubleclick_ondoubleclick();"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>

<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->



<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
          if(scene[get(xml.scene)].full360,
            set(sceneisfull360, false);
            sub(viewhfov, panoview.hmax, panoview.hmin);
            if (viewhfov == 360,
              sub(viewvfov, panoview.vmax, panoview.vmin);
              if (viewvfov == 180,
                set(sceneisfull360, true);
              );
            );
            if (sceneisfull360,
              set(plugin[gyroscope].camroll, true);
            ,
              set(plugin[gyroscope].camroll, false);
            );
          ,
            set(plugin[gyroscope].camroll, false);
          );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
        if(%1,
          set(plugin[gyroscope].activated,true);
        ,
          set(plugin[gyroscope].activated,false);
        );
        if (%1 != plugin[gyroscope].enabled,
          if(plugin[gyroscope].activated,
            switch(plugin[gyroscope].enabled);
          ,
            set(plugin[gyroscope].enabled, false);
          );
          if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
        );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,

      
      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

<!-- ********** -->
<!-- Docked Thumbnails &amp; Control Bar -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->

<krpano controlBar_dockedThumbnailsbarbuilt="false" controlBar_dockedThumbnailsIsOpened="false" />

<events name="controlBar_dockedThumbnailsbarevents" 
	onxmlcomplete="controlBar_dockedThumbnailsbuildMenuBar();"


	
	keep="true"/>



<action name="controlBar_dockedThumbnailsbuildMenuBar">
	ifnot (controlBar_dockedThumbnailsbarbuilt, controlBar_dockedThumbnailsbuildMenu(); set(controlBar_dockedThumbnailsbarbuilt, true););
</action>



<action name="controlBar_dockedThumbnailsbuildMenu">
	
    set(controlBar_dockedThumbnailsbutton_pos, 0);
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].x, get(controlBar_dockedThumbnailsbutton_pos));
    inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.fullscreensupport,
        set(layer[controlBar_dockedThumbnailsbtn_openfs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );




      set(layer[controlBar_dockedThumbnailsbtn_autotour_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      
      set(layer[controlBar_dockedThumbnailsbtn_autotour_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );





      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_right].x, get(controlBar_dockedThumbnailsbutton_pos));
        
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_left].x, get(controlBar_dockedThumbnailsbutton_pos));
        
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_down].x, get(controlBar_dockedThumbnailsbutton_pos));
        
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_up].x, get(controlBar_dockedThumbnailsbutton_pos));
        
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_out].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
        set(layer[controlBar_dockedThumbnailsbtn_in].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );




	
	
	
</action>

<events name="controlBar_dockedThumbnailsStartTourEvents" onTourStart="controlBar_dockedThumbnailsCallOnStartTour();" keep="true" />

<action name="controlBar_dockedThumbnailsCallOnStartTour">
	
	controlBar_dockedThumbnailsshowMenuControls();
</action>




    <layer name="controlBar_dockedThumbnails_bg"
           keep="true"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/footer.png"
           zorder="4"
           width="100%"
           align="bottomleft"
           x="0"
           visible="false" />


    <style name="controlBar_dockedThumbnails_btn_style_on_bg"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|48|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />
    <style name="controlBar_dockedThumbnails_btn_style_on_bg_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|0|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />

    <style name="controlBar_dockedThumbnails_btn_down_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           />

    <style name="controlBar_dockedThumbnails_btn_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           />
    <style name="controlBar_dockedThumbnails_btn_style_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           />


    <style name="controlBar_dockedThumbnails_btn_style_on"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
                  crop="0|48|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            />
    <style name="controlBar_dockedThumbnails_btn_style_on_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            />



	<events name="controlBar_dockedThumbnailscontrolmodechangedevent" oncontrolmodechanged="controlBar_dockedThumbnailsupdateControlModeButtons();" keep="true"/>
	<action name="controlBar_dockedThumbnailsHideControlModeButtons">
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
		
	</action>
	<action name="controlBar_dockedThumbnailsShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
			
		,
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
			
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowControlModeButtons();
		,
			controlBar_dockedThumbnailsHideControlModeButtons();
		);
	,
		controlBar_dockedThumbnailsHideControlModeButtons();
	);
	</action>
	
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="setControlModeMoveTo();
"
           visible="false"
           devices="desktop"
           />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_drag_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="setControlModeDragTo();
"
           visible="false"
           devices="desktop"
           />

    <layer name="controlBar_dockedThumbnailsbtn_in"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_in.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="viewControlZoomIn(false);"
           onup="viewControlZoomStop();
"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_out"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_out.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="viewControlZoomOut(false);
"
           onup="viewControlZoomStop();
"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_left"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_left.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="viewControlMoveLeft(false);
"
           onup="viewControlMoveHoriStop();
"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_right"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_right.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="viewControlMoveRight(false);
"
           onup="viewControlMoveHoriStop();
"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_up"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_up.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="viewControlMoveUp(false);
"
           onup="viewControlMoveVertStop();
"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_down"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_down.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="viewControlMoveDown(false);
"
           onup="viewControlMoveVertStop();
"
           devices="desktop"
           visible="false"
           />









    <layer name="controlBar_dockedThumbnailsbtn_openfs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_enter_fs.png"
           onclick="enterFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           devices="fullscreensupport"
           />
    <layer name="controlBar_dockedThumbnailsbtn_closefs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_close_fs.png"
           onclick="exitFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           devices="fullscreensupport"
           />


    <layer name="controlBar_dockedThumbnailsbtn_autotour_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_automatic_tour.png"
           onclick="startautotour();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_automatic_tour.png"
           onclick="stopautotour();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           />




    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_controls.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="controlBar_dockedThumbnailshideMenuControls();hideTourControls();
"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_showcontrols"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls_bg.png"
            align="bottomright"
            zorder="4"
            height="36"
            width="36"
            visible="false"
            y="12"
            x="0" >
    <layer name="controlBar_dockedThumbnailsbtn_showcontrols_fg"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            onclick="controlBar_dockedThumbnailsshowMenuControls();showTourControls();
"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls.png"
            align="center"
            height="36"
            width="36"
            />
    </layer>


<action name="controlBar_dockedThumbnailshideMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, false);
	set(layer[controlBar_dockedThumbnails_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, true);
	
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, false);

		controlBar_dockedThumbnailsupdateAutotourButtons();

		controlBar_dockedThumbnailsupdateControlModeButtons();
		controlBar_dockedThumbnailsupdateFullscreenButtons();
</action>
<action name="controlBar_dockedThumbnailsshowMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, true);
      controlBar_dockedThumbnailsupdateFullscreenButtons();

      controlBar_dockedThumbnailsupdateAutotourButtons();

      controlBar_dockedThumbnailsupdateControlModeButtons();
      set(layer[controlBar_dockedThumbnails_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, false);
	
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, true);
	
	
</action>



	<events name="controlBar_dockedThumbnailsmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideFullscreenButtons">
		set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, false);
		
	</action>
	<action name="controlBar_dockedThumbnailsShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, true);
				
			,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible ,true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible,false);
				
			);
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateFullscreenButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowFullscreenButtons();
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>


	<events name="controlBar_dockedThumbnailsAutotourEvents"
		onstartautotour="controlBar_dockedThumbnailsupdateAutotourButtons();"
		onstopautotour="controlBar_dockedThumbnailsupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutotourButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , false);
		
	</action>
	<action name="controlBar_dockedThumbnailsShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , true);
			
		,
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , false);
			
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutotourButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutotourButtons();
		,
			controlBar_dockedThumbnailsHideAutotourButtons();
		);
	</action>





<!-- ********** -->
<!-- Classic Thumbnails Bar -->
<!-- id : thumbnailsBar-theme02 -->
<!-- ********** -->






<layer name="thumbnailsBar_thumbnailsBar_theme02" 
	keep="true" 
	type="image" 
	visible="false"
	align="top" 
	
		width="100%" 
		height="0" 
		accuracy="1"
	
	x="0"
	y="0"
	
	url="%FIRSTXML%/graphics/classicthumbnailsbar/frame_bg.png" 
	scale9grid="10|10|80|80"
	
	zorder="5"
/>



<layer name="thumbnailBorderSource_thumbnailsBar_theme02"
	keep="true"
	visible="false"
	onloaded="loadedImages_thumbnailsBar_theme02(border);"
	url="%FIRSTXML%/graphics/classicthumbnailsbar/thumbnails_states.png" 
	offsetX="10"
	offsetY="10"
	quarterHeight="0"
/>



	
	<krpano arrow1Loaded_thumbnailsBar_theme02="false" arrow2Loaded_thumbnailsBar_theme02="false" borderLoaded_thumbnailsBar_theme02="false" thumbnailsLoadedCounter_thumbnailsBar_theme02="0" thumbsCount_thumbnailsBar_theme02="0" thumbsCounter_thumbnailsBar_theme02="0" firstInit_thumbnailsBar_theme02="false" />
	
	
	<events name="thumbnailsScrollEvents_thumbnailsBar_theme02" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_thumbnailsBar_theme02,set(isLoaded_thumbnailsBar_theme02, true);if(isStarted_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02();););"
		onTourStart="set(isStarted_thumbnailsBar_theme02, true);if(isLoaded_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02(););"
		onnewpano="if(startResize_thumbnailsBar_theme02,if(firstInit_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02();););"
		onresize="onResizeHandler_thumbnailsBar_theme02();"
		hidetourthumbnails="hideWithThumbnailsButton_thumbnailsBar_theme02();" 
		showtourthumbnails="showWithThumbnailsButton_thumbnailsBar_theme02();" 
		hidetourcontrols="hideWithControlsBar_thumbnailsBar_theme02();" 
		showtourcontrols="showWithControlsBar_thumbnailsBar_theme02();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar_theme02(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar_theme02(););"
	/>
	
	
	<layer name="scrollAreaContainer_thumbnailsBar_theme02" 
		keep="true"
		type="container" 
		align="topleft"
		x="5"
		y="5"
		
		marginX="5"
		marginY="5"
		
		width="0" 
		height="0"
		
		targetWidth="0"
		targetHeight="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar_thumbnailsBar_theme02"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="75"
		itemHeight="25"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="0"
		currentThumbsCount="0"
		
		adjustToContent="false"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea_thumbnailsBar_theme02" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="top"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow_thumbnailsBar_theme02" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_thumbnailsBar_theme02"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_thumbnailsBar_theme02(arrow1);"
			url="%FIRSTXML%/graphics/classicthumbnailsbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow_thumbnailsBar_theme02" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_thumbnailsBar_theme02"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_thumbnailsBar_theme02(arrow2);"
			url="%FIRSTXML%/graphics/classicthumbnailsbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages_thumbnailsBar_theme02">
		if(%1 == "arrow1",
			set(arrow1Loaded_thumbnailsBar_theme02, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_thumbnailsBar_theme02, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				set(borderLoaded_thumbnailsBar_theme02, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_thumbnailsBar_theme02);
		);
	</action>
	
	<action name="onLoadCompleteHandler_thumbnailsBar_theme02">
		
		set(thumbsCount_thumbnailsBar_theme02, 0);
		
		
		set(thumbsCount_thumbnailsBar_theme02, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_thumbnailsBar_theme02();
		
		if(firstInit_thumbnailsBar_theme02,
			onLoadCompleteHandlerPartThree_thumbnailsBar_theme02();
		,
			onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02">
		set(imgCounter_thumbnailsBar_theme02, 3);
		
		if(arrow1Loaded_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		if(arrow2Loaded_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		if(thumbsCount_thumbnailsBar_theme02 == thumbnailsLoadedCounter_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		
		if(imgCounter_thumbnailsBar_theme02 LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_thumbnailsBar_theme02);
			onLoadCompleteHandlerPartThree_thumbnailsBar_theme02();
		,
			delayedcall(delayedCallOnLoadComplete_thumbnailsBar_theme02, 0.2, onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_thumbnailsBar_theme02">
		resetMouseBehavior_thumbnailsBar_theme02();
		highlightCurrentThumb_thumbnailsBar_theme02();
		
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
			mul(adjustWidth_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
			add(adjustWidth_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width));
			mul(adjustHeight_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginY), 2);
			add(adjustHeight_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].height));
			
			
			if(adjustWidth_thumbnailsBar_theme02 GT stagewidth,
				set(adjustWidth_thumbnailsBar_theme02, get(stagewidth));
				set(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent, false);
			,
				if(adjustHeight_thumbnailsBar_theme02 GT stageheight,
					set(adjustHeight_thumbnailsBar_theme02, get(stageheight));
					set(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent, false);
				);
			);
			
			setSize_thumbnailsBar_theme02(get(adjustWidth_thumbnailsBar_theme02), get(adjustHeight_thumbnailsBar_theme02));
		);
		
		setupArrows_thumbnailsBar_theme02(true);
		
		
		if (thumbsCounter_thumbnailsBar_theme02 LE 0,
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		);
		
		
		set(startResize_thumbnailsBar_theme02, true);
		set(firstInit_thumbnailsBar_theme02, true);
	</action>
	
	
	<action name="onResizeHandler_thumbnailsBar_theme02">
		
		delayedcall(0.1, onResizeCallback_thumbnailsBar_theme02(false); );
	</action>
	
	
	<action name="onResizeCallback_thumbnailsBar_theme02">
		if(startResize_thumbnailsBar_theme02,
			setSize_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].targetWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].targetHeight));
			setupArrows_thumbnailsBar_theme02(%1);
			
			
			if (thumbsCounter_thumbnailsBar_theme02 LE 0,
				set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, true);
			onResizeCallback_thumbnailsBar_theme02(true);
		</action>
		
		<action name="hideWithThumbnailsButton_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		</action>
	
	
		<action name="showWithControlsBar_thumbnailsBar_theme02">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, true);
					onResizeCallback_thumbnailsBar_theme02(true);
				,
					set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit_thumbnailsBar_theme02">
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth));
		
		
		mul(totalOffsetX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth), 2);
		mul(totalOffsetY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth), 2);
		
		
		if(startResize_thumbnailsBar_theme02,
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
	</action>
		
	
	<action name="thumbnailBorderImageInit_thumbnailsBar_theme02">
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY));
		
		
		mul(totalOffsetX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX), 2);
		mul(totalOffsetY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY), 2);
		
		
		if(startResize_thumbnailsBar_theme02,
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		
		
		div(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].height), 4);
		
		
		set(cropX_thumbnailsBar_theme02, 0);
		set(cropY_thumbnailsBar_theme02, 0);
		set(cropW_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].width));
		set(cropH_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropDefault, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));

		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropVisited, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		set(scaleX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX));
		set(scaleY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY));
		sub(scaleW_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].width), get(totalOffsetX_thumbnailsBar_theme02));
		sub(scaleH_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight), get(totalOffsetY_thumbnailsBar_theme02));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].scale9grid, get(scaleX_thumbnailsBar_theme02), '|', get(scaleY_thumbnailsBar_theme02), '|', get(scaleW_thumbnailsBar_theme02), '|', get(scaleH_thumbnailsBar_theme02));
	</action>
	
	
	<action name="loadThumbs_thumbnailsBar_theme02">
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(imgCounter_thumbnailsBar_theme02, 1);
		,
			set(imgCounter_thumbnailsBar_theme02, 0);
		);
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			if(borderLoaded_thumbnailsBar_theme02,
				dec(imgCounter_thumbnailsBar_theme02);
			);
		);
		
		if(imgCounter_thumbnailsBar_theme02 LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar_theme02);
			loadThumbsPartTwo_thumbnailsBar_theme02();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar_theme02, 0.2, loadThumbs_thumbnailsBar_theme02());
		);
	</action>
	
	<action name="loadThumbsPartTwo_thumbnailsBar_theme02">
		ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].ready,
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				thumbnailBorderImageInit_thumbnailsBar_theme02();
			,
				thumbnailBorderDrawInit_thumbnailsBar_theme02();
			);
			
			
			set(thumbsCounter_thumbnailsBar_theme02, 0);
			
			
				for( set(i_thumbnailsBar_theme02, 0), i_thumbnailsBar_theme02 LT scene.count, inc(i_thumbnailsBar_theme02),
					createThumb_thumbnailsBar_theme02(get(scene[get(i_thumbnailsBar_theme02)].name), get(scene[get(i_thumbnailsBar_theme02)].thumburl), get(i_thumbnailsBar_theme02), get(scene[get(i_thumbnailsBar_theme02)].titleid));
					inc(thumbsCounter_thumbnailsBar_theme02);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount, get(thumbsCounter_thumbnailsBar_theme02));
			
			
			setSize_thumbnailsBar_theme02(get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width), get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height));
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar_thumbnailsBar_theme02();
				,
					hideWithControlsBar_thumbnailsBar_theme02();
				);
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].ready, true);
		);
	</action>
	
	
	<action name="setSize_thumbnailsBar_theme02">
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].targetWidth, %1);
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].updatepos();
		
		
		mul(totalMarginX_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
		mul(totalMarginY_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginY), 2);
		
			add(totalPluginHeight_thumbnailsBar_theme02, get(totalMarginY_thumbnailsBar_theme02), get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelheight LT totalPluginHeight_thumbnailsBar_theme02,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height, get(totalPluginHeight_thumbnailsBar_theme02));
			);
		
		layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].updatepos();
		
		
		sub(containerWidth_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalMarginX_thumbnailsBar_theme02));
		sub(containerHeight_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelheight), get(totalMarginY_thumbnailsBar_theme02));

		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(containerWidth_thumbnailsBar_theme02));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].height, get(containerHeight_thumbnailsBar_theme02));
		
		set(scrollAreaSize_thumbnailsBar_theme02, 0);
		
		
		mul(totalThumbsSpacer_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount), get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
		sub(totalThumbsSpacer_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, true);
		

			mul(scrollAreaSize_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount));
			add(scrollAreaSize_thumbnailsBar_theme02, get(totalThumbsSpacer_thumbnailsBar_theme02));
			
			set(layer[thumbsScrollArea_thumbnailsBar_theme02].width, get(scrollAreaSize_thumbnailsBar_theme02));
			set(layer[thumbsScrollArea_thumbnailsBar_theme02].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
			
			
			if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_thumbnailsBar_theme02();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_thumbnailsBar_theme02">
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible,
			set(boolValue_thumbnailsBar_theme02, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue_thumbnailsBar_theme02, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, get(boolValue_thumbnailsBar_theme02));
		);
	</action>
	
	
	<action name="createThumb_thumbnailsBar_theme02">

			add(offsetFactor_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
	
			mul(thumbIncPos_thumbnailsBar_theme02, %3, get(offsetFactor_thumbnailsBar_theme02));
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				add(thumbIncPos_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX));
			);
			
		
		mul(negativeOffsetX_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX), -1);
		mul(negativeOffsetY_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_thumbnailsBar_theme02);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages_thumbnailsBar_theme02("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY));
		
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_thumbnailsBar_theme02);
				set(layer[get(thumbName)].x, get(thumbIncPos_thumbnailsBar_theme02));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_thumbnailsBar_theme02(); mainloadscene(%1); delayedcall(0.1,highlightThumb_thumbnailsBar_theme02(%1)));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_thumbnailsBar_theme02));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_thumbnailsBar_theme02));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_thumbnailsBar_theme02(); mainloadscene(%1); delayedcall(0.1,highlightThumb_thumbnailsBar_theme02(%1)));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_thumbnailsBar_theme02)); 
				
		);
		
		
		setupMouseBehavior_thumbnailsBar_theme02(%1, %4);
		
	</action>
	
	
	<action name="removeThumb_thumbnailsBar_theme02">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		removelayer(get(thumbBorderName));
	</action>
	
	
	
	<action name="setupArrows_thumbnailsBar_theme02">
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
			hideArrows_thumbnailsBar_theme02();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[thumbsScrollArea_thumbnailsBar_theme02].width,
				
					showArrows_thumbnailsBar_theme02();
				,
					hideArrows_thumbnailsBar_theme02();
				);
			,
				hideArrows_thumbnailsBar_theme02();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_thumbnailsBar_theme02();
		);
		
		
			
			if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_thumbnailsBar_theme02">
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].visible, true);
		set(layer[scrollNextArrow_thumbnailsBar_theme02].visible, true);
		
		
		
			
			add(totalArrowSize_thumbnailsBar_theme02, get(layer[scrollPrevArrow_thumbnailsBar_theme02].width), get(layer[scrollNextArrow_thumbnailsBar_theme02].width));
		
			
			sub(scrollAreaContainerSize_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalArrowSize_thumbnailsBar_theme02));
		
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(scrollAreaContainerSize_thumbnailsBar_theme02));
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].x, get(layer[scrollPrevArrow_thumbnailsBar_theme02].width));
			
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onhover, scrollPrev_thumbnailsBar_theme02(););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onhover, scrollNext_thumbnailsBar_theme02(););
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onclick, scrollPrev_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onclick, scrollNext_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onout, set(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedInit)););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onout, set(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows_thumbnailsBar_theme02">
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].visible, false);
		set(layer[scrollNextArrow_thumbnailsBar_theme02].visible, false);
		
		

			mul(totalMargin_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
			
			sub(scrollAreaContainerSize_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalMargin_thumbnailsBar_theme02));

			set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(scrollAreaContainerSize_thumbnailsBar_theme02));
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_thumbnailsBar_theme02">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar_theme02].stopscrolling();
		
		set(scrollLimit_thumbnailsBar_theme02, 0);
		
		
			
				sub(scrollLimit_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width), get(layer[scrollAreaContainer_thumbnailsBar_theme02].width));
				div(scrollLimit_thumbnailsBar_theme02, 2);
			
			add(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar_theme02].x GE scrollLimit_thumbnailsBar_theme02,
				set(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(scrollLimit_thumbnailsBar_theme02));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_thumbnailsBar_theme02">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar_theme02].stopscrolling();
		
			
			sub(scrollLimit_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width), get(layer[scrollAreaContainer_thumbnailsBar_theme02].width));
			
				div(scrollLimit_thumbnailsBar_theme02, 2);
			mul(scrollLimit_thumbnailsBar_theme02, -1);
			
			sub(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar_theme02].x LE scrollLimit_thumbnailsBar_theme02,
				set(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(scrollLimit_thumbnailsBar_theme02));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_thumbnailsBar_theme02">
	
		
		
			for( set(j_thumbnailsBar_theme02, 0), j_thumbnailsBar_theme02 LT scene.count, inc(j_thumbnailsBar_theme02),
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_thumbnailsBar_theme02)].name));
				txtadd(thumbBorderName, '_thumbnailsBar_theme02');
				
				setupMouseBehavior_thumbnailsBar_theme02(get(scene[get(j_thumbnailsBar_theme02)].name), get(scene[get(j_thumbnailsBar_theme02)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_thumbnailsBar_theme02">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaDefault));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaDefault));
				
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_thumbnailsBar_theme02">
			delayedcall(0.1,highlightThumb_thumbnailsBar_theme02(get(xml.scene)));
	</action>
	
	
	<action name="highlightThumb_thumbnailsBar_theme02">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_thumbnailsBar_theme02');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, "");
		);

		scrollToThumb_thumbnailsBar_theme02(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_thumbnailsBar_theme02">
			scrollToThumb_thumbnailsBar_theme02(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_thumbnailsBar_theme02">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');

			set(posX_thumbnailsBar_theme02, 0);
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				div(halfThumbWidth_thumbnailsBar_theme02, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
					add(posX_thumbnailsBar_theme02, get(layer[get(thumbName)].x), get(halfThumbWidth_thumbnailsBar_theme02));
				);
				if(layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter(get(posX_thumbnailsBar_theme02), 0);
				);
			,
				div(halfThumbWidth_thumbnailsBar_theme02, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
					add(posX_thumbnailsBar_theme02, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_thumbnailsBar_theme02));
				);
				if(layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter(get(posX_thumbnailsBar_theme02), 0);
				);
			);
		
	</action>
	





<!-- ********** -->
<!-- Context menu -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="fisheye"       onclick="setViewFisheye();
"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[fisheye].visible, true);
      getmessage(contextmenu.item[fisheye].caption, contextmenufisheyelabel);
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    ,
      set(contextmenu.item[fisheye].visible, false);
      set(contextmenu.item[littleplanet].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>

<!-- ********** -->
<!-- Progress Bar and Loopings -->
<!-- id : progressbar -->
<!-- ********** -->

  <progress showwait.flash="loopings(
				0xffffff,
				15,15,
				0,0,
				0xffffff,0,
				0,0,center
				)"
			showreloads.flash="false"
			parent=""
			/>


  <layer name="progressbar_bg"
    align="bottom"
    bgcolor="0xffffff"
    bgalpha="1.0"
    bgborder="0"
    onclick="progressbar_stop();"
    enabled="true"
    handcursor="false"
    bgcapture="true"
    x="0" y="0"
    type="container"
    width="100%" height="5"
    visible="true"
    keep="true">
      <layer name="progressbar_bar" 
        align="topleft"
        bgcolor="0x555555"
        bgalpha="1.0"
        x="0" y="0"
        type="container"
        width="0%"
        height="100%"
        enabled="false"
        keep="true"
        />
  </layer>
  <action name="progressbar_start">
    if(scene[get(xml.scene)].video,
      progressbar_stop();
    ,
      mul(progress_val, get(progress.progress), 100);
      txtadd(progress_percent, get(progress_val),"%");
      set(layer[progressbar_bar].width, get(progress_percent));
    if (device.html5, 
      mul(xcrop, layer[progressbarwheel].frame, 64);
      txtadd(layer[progressbarwheel].crop, get(xcrop), '|0|64|64');
      
      inc(layer[progressbarwheel].frame);
      if(layer[progressbarwheel].frame GE layer[progressbarwheel].frames, set(layer[progressbarwheel].frame,0));
    );
      delayedcall(progressbar_progresscall, 0.1,progressbar_start());
      if(progress_val == 100,
        progressbar_stop();
      );
    );
  </action>
  <action name="progressbar_stop">
    stopdelayedcall(progressbar_progresscall);
    set(layer[progressbar_bg].visible, false);
    set(layer[progressbar_bar].width, "0%");
    if (device.html5, set(layer[progressbarwheel].visible, false););
  </action>
  <events name="progressbar_events" onloadcomplete="progressbar_stop();" onxmlcomplete="if (device.html5,set(layer[progressbarwheel].visible, true););set(layer[progressbar_bg].visible, true);progressbar_start();" keep="true" />

  <!-- loading wheel -->
  <layer name="progressbarwheel"
         keep="true"
         devices="html5"
         visible="false"
         url="%FIRSTXML%/graphics/progressbarandloopings/loadingwheel.png"
         crop="0|0|64|64"
         align="center"
         x="0" y="0"
         frame="0" frames="12"
         width="30"
         height="30" />

<!-- ********** -->
<!-- SketchFab -->
<!-- id : websiteViewer -->
<!-- ********** -->

<ptplugin name="websiteViewer" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="title_displayed" value="false" type="bool" />
		<option name="title_position" value="top" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_style" value="normal" type="string" />
		<option name="title_decoration" value="none" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="iframe_scrolling" value="auto" type="string" />
		<option name="iframe_default_width" value="1100" type="int" />
		<option name="iframe_default_height" value="800" type="int" />
		<option name="iframe_devices_width" value="1100" type="int" />
		<option name="iframe_devices_height" value="800" type="int" />
		<option name="force_ios_scrolling" value="true" type="bool" />
		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="top" type="string" />
		<option name="fullscreen_text" value="websiteViewerfullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="websiteViewerclose_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_websiteViewer')" type="string" />
		<option name="zorder" value="8" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_websiteViewer">
	set(ptplugin[websiteViewer].jsready, true);
</action>

<action name="openWebsite_websiteViewer">
	ifnot(ptplugin[websiteViewer].isOpen,
		set(ptplugin[websiteViewer].isOpen, true);
		set(ptplugin[websiteViewer].doNotDeleteMe, false);
		getmessage(websiteViewer_boxurl, %1);
		txtadd(websiteViewer_boxurl, ?iframe=true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(websiteViewer, loadSingleArrayItem, get(websiteViewer_boxurl), %2));
		events.dispatch(onremovedisplayedobject);
	,
		if('%1' != websiteViewer_boxurl,
			closeKolorBox_websiteViewer();
			delayedcall(0.3,openWebsite_websiteViewer(%1,%2););
		);
	);
</action>

<action name="toggleWebsite_websiteViewer">
	js(invokePluginFunction(websiteViewer, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_websiteViewer">
	js(invokePluginFunction(websiteViewer, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_websiteViewer">
	resumeautorotation(forceplugin);

	set(ptplugin[websiteViewer].isOpen, false);
</action>

<action name="changeLanguage_websiteViewer">
	if(ptplugin[websiteViewer].jsready,
		stopdelayedcall(delay_websiteViewer);
		js(invokePluginFunction(websiteViewer, changeLanguage));
	,
		delayedcall(delay_websiteViewer, 0.1, changeLanguage_websiteViewer(););
	);
</action>

<events name="kolorBoxEvents_websiteViewer" 
	keep="true"
	changetourlanguage="changeLanguage_websiteViewer();"
	/>

<!-- ********** -->
<!-- Website Box1 -->
<!-- id : websiteViewer1 -->
<!-- ********** -->

<ptplugin name="websiteViewer1" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="title_displayed" value="false" type="bool" />
		<option name="title_position" value="top" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_style" value="normal" type="string" />
		<option name="title_decoration" value="none" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="iframe_scrolling" value="auto" type="string" />
		<option name="iframe_default_width" value="1100" type="int" />
		<option name="iframe_default_height" value="800" type="int" />
		<option name="iframe_devices_width" value="1100" type="int" />
		<option name="iframe_devices_height" value="800" type="int" />
		<option name="force_ios_scrolling" value="true" type="bool" />
		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="websiteViewer1fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="websiteViewer1close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_websiteViewer1')" type="string" />
		<option name="zorder" value="9" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_websiteViewer1">
	set(ptplugin[websiteViewer1].jsready, true);
</action>

<action name="openWebsite_websiteViewer1">
	ifnot(ptplugin[websiteViewer1].isOpen,
		set(ptplugin[websiteViewer1].isOpen, true);
		set(ptplugin[websiteViewer1].doNotDeleteMe, false);
		getmessage(websiteViewer1_boxurl, %1);
		txtadd(websiteViewer1_boxurl, ?iframe=true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(websiteViewer1, loadSingleArrayItem, get(websiteViewer1_boxurl), %2));
		events.dispatch(onremovedisplayedobject);
	,
		if('%1' != websiteViewer1_boxurl,
			closeKolorBox_websiteViewer1();
			delayedcall(0.3,openWebsite_websiteViewer1(%1,%2););
		);
	);
</action>

<action name="toggleWebsite_websiteViewer1">
	js(invokePluginFunction(websiteViewer1, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_websiteViewer1">
	js(invokePluginFunction(websiteViewer1, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_websiteViewer1">
	resumeautorotation(forceplugin);

	set(ptplugin[websiteViewer1].isOpen, false);
</action>

<action name="changeLanguage_websiteViewer1">
	if(ptplugin[websiteViewer1].jsready,
		stopdelayedcall(delay_websiteViewer1);
		js(invokePluginFunction(websiteViewer1, changeLanguage));
	,
		delayedcall(delay_websiteViewer1, 0.1, changeLanguage_websiteViewer1(););
	);
</action>

<events name="kolorBoxEvents_websiteViewer1" 
	keep="true"
	changetourlanguage="changeLanguage_websiteViewer1();"
	/>

<!-- ********** -->
<!-- Photos Denis Barinault  |  Montage Aaron Bass -->
<!-- id : title -->
<!-- ********** -->

  <events name="title_events" 
    onTourStart="showtitle();"
    hidetourcontrols="hidetitle();" 
    showtourcontrols="showtitle();" 
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="hidetitle">set(layer[title].visible, false);</action>
  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    getmessage(layer[title].html,get(projecttitleid));
    escape(layer[title].html);
  </action>

  <layer name="title" keep="true" zorder="10"
         type="text"
         align="bottomleft" x="10" y="10"
         onloaded="getmessage(html,get(projecttitleid));escape(html);"
         bg="false"
         bgborder="0"
         alpha="1"
         visible="false"
         capture="false" handcursor="false" enabled="false"
         interactivecontent="false" 
         css="text-align:left;
              color:#ffffff;
              font-family:Verdana;
              font-weight:bold;
              font-size:16px;"/>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad, 
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


<action name="setViewFisheye">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewFisheyeComplete();
	);
</action>

<action name="setViewFisheyeComplete">
	set(view.fisheyefovlink, 1.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.30));
	tween(view.fisheye, 0.0, distance(1.0, 0.30), easeOutQuad,
		set(view.stereographic,false);
		tween(view.fisheye, 0.45, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <action name="displayVideo">
    set(displayedVideoObjectToCreate, true);
    set(displayedVideoObjectForDesktop, true);
    if(%10,
      set(displayedVideoObjectForDesktop, false);
    ,
      if (device.tablet, set(displayedVideoObjectForDesktop, false););
      if (device.mobile, set(displayedVideoObjectForDesktop, false););
    );
    
    if (layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].donotdeleteme,
        set(layer[displayedStandardVideo].fromdesktop, get(displayedVideoObjectForDesktop));
        set(layer[displayedStandardVideo].currentCall, false);
        set(layer[displayedStandardVideo].visible, true);
        if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, true););
        set(layer[displayedStandardVideo].donotdeleteme, false);
        set(layer[displayedStandardVideo].pausebgsound, %11);
        ifnot(layer[displayedStandardVideo].pausedonstart,
          if(layer[displayedStandardVideo].pausebgsound,
            pauseTourSoundsActions(true,true,false,true,true);
          );
        );
        if (%1 == layer[displayedStandardVideo].videourl,
          layer[displayedStandardVideo].stop();
          ifnot(layer[displayedStandardVideo].fromdesktop,
            removelayer(displayedStandardVideoOverlayButton);
            removelayer(displayedStandardVideoOverlay);
          );resumeautorotation(forcehotspot);

          delete(tour_current_played_video);
          set(tour_current_played_video_state, 0);
          if(layer[displayedStandardVideo].pausebgsound,
            resumeTourSoundsActions(true,true,true,true,true);
          );
          if(layer[displayedStandardVideo].overlay,removelayer(displayedStandardVideoOverlayBkg););
          removelayer(displayedStandardVideo);
        ,
          
          set(tour_current_played_video, %1);
          if(tour_current_played_sound,
            set(tour_current_played_video_state, 2);
          ,
            set(tour_current_played_video_state, 1);
          );
          set(layer[displayedStandardVideo].onloaded, displayVideoWhenLoaded(%1,%10););
          set(layer[displayedStandardVideo].autoresume, true);
          if(device.html5,
            set(layer[displayedStandardVideo].url, %FIRSTXML%/graphics/videoplayer.js);
          ,
            set(layer[displayedStandardVideo].url, %SWFPATH%/graphics/videoplayer.swf);
          );
        );
      ,
        events.dispatch(onremovedisplayedobject);
        if (%1 != layer[displayedStandardVideo].videourl,
          delayedcall(0.2,displayVideo(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14););
        );
      );
    ,
      if(%12,
        addlayer(displayedStandardVideoOverlayBkg);
        set(layer[displayedStandardVideoOverlayBkg].keep, false);
        set(layer[displayedStandardVideoOverlayBkg].visible , false);
        set(layer[displayedStandardVideoOverlayBkg].onclick, displayedVideoObjectStartStopAction(););
        set(layer[displayedStandardVideoOverlayBkg].zorder , 97);
        set(layer[displayedStandardVideoOverlayBkg].type, container);
        set(layer[displayedStandardVideoOverlayBkg].width   , 100%);
        set(layer[displayedStandardVideoOverlayBkg].height  , 100%);
        set(layer[displayedStandardVideoOverlayBkg].bgcolor, "0x%13");
        set(layer[displayedStandardVideoOverlayBkg].bgalpha, %14);
        set(layer[displayedStandardVideoOverlayBkg].bgcapture, true);
      );
      addlayer(displayedStandardVideo);
      set(layer[displayedStandardVideo].keep, false);
      set(layer[displayedStandardVideo].visible , false);
      set(layer[displayedStandardVideo].onclick, displayedVideoObjectStartStopAction(););
      set(layer[displayedStandardVideo].zorder , 98);
      set(layer[displayedStandardVideo].align   , %2);
      set(layer[displayedStandardVideo].x       , %3);
      set(layer[displayedStandardVideo].y       , %4);
      set(layer[displayedStandardVideo].width   , %5);
      set(layer[displayedStandardVideo].height  , %6);
      set(layer[displayedStandardVideo].overlay , %12);
      set(layer[displayedStandardVideo].iphoneworkarounds, false);
      
      if (%7,
        set(layer[displayedStandardVideo].loop, true);
       ,
        set(layer[displayedStandardVideo].onvideocomplete, displayedVideoObjectStartStopAction(););
      );
      if (displayedVideoObjectForDesktop,
        set(layer[displayedStandardVideo].pausedonstart, false);
        set(layer[displayedStandardVideo].onvideoready, set(layer[displayedStandardVideo].visible, true);if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, true);););
      ,
        
        set(layer[displayedStandardVideo].pausedonstart, true);
        set(layer[displayedStandardVideo].onvideoready, set(layer[displayedStandardVideo].started, false);set(layer[displayedStandardVideo].visible, true);if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, true););delayedcall(0.1,applyDisplayedStandardVideoOverlay(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11)););
      );
      
      set(layer[displayedStandardVideo].currentCall, true);
      set(layer[displayedStandardVideo].donotdeleteme, true);
      events.dispatch(onremovedisplayedobject);
      delayedcall(0.2,displayVideo(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14););
      if (%8,pauseautorotation(forcehotspot);
);
    );
  </action>
  <action name="applyDisplayedStandardVideoOverlay">
      addlayer(displayedStandardVideoOverlay);
      
      set(layer[displayedStandardVideoOverlay].type, container);
      set(layer[displayedStandardVideoOverlay].visible, true);
      set(layer[displayedStandardVideoOverlay].zorder, 99);
      set(layer[displayedStandardVideoOverlay].keep, false);
      set(layer[displayedStandardVideoOverlay].align, %2);
      set(layer[displayedStandardVideoOverlay].x, %3);
      set(layer[displayedStandardVideoOverlay].y, %4);
      set(layer[displayedStandardVideoOverlay].width, get(layer[displayedStandardVideo].pixelwidth));
      set(layer[displayedStandardVideoOverlay].height, get(layer[displayedStandardVideo].pixelheight));
      
      addlayer(displayedStandardVideoOverlayButton);
      set(layer[displayedStandardVideoOverlayButton].visible, true);
      set(layer[displayedStandardVideoOverlayButton].keep, false);
      set(layer[displayedStandardVideoOverlayButton].parent, displayedStandardVideoOverlay);
      set(layer[displayedStandardVideoOverlayButton].align, center);
      set(layer[displayedStandardVideoOverlayButton].url, %FIRSTXML%/graphics/videoplayer_play_button.png);
      set(layer[displayedStandardVideoOverlayButton].width, 50);
      set(layer[displayedStandardVideoOverlayButton].height, 50);
      set(layer[displayedStandardVideoOverlayButton].alpha, 0.5);
      set(layer[displayedStandardVideoOverlayButton].enabled, false);
      set(layer[displayedStandardVideoOverlayButton].capture, false);
      set(layer[displayedStandardVideoOverlayButton].onclick, displayedVideoObjectStartStopAction(););
  </action>
  <action name="displayVideoWhenLoaded">
    layer[displayedStandardVideo].playVideo(%1,,%2);
    ifnot(tour_soundson,
      pauseVideoActionsSounds();
    );
  </action>
  <action name="displayedVideoObjectStartStopAction">
    if(layer[displayedStandardVideo].fromdesktop,
      layer[displayedStandardVideo].stop();
      set(layer[displayedStandardVideo].visible, false);
      if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, false););resumeautorotation(forcehotspot);

      delete(tour_current_played_video);
      set(tour_current_played_video, null);
      set(tour_current_played_video_state, 0);
      if(layer[displayedStandardVideo].pausebgsound,
        resumeTourSoundsActions(true,true,true,true,true);
      );
      if(layer[displayedStandardVideo].overlay,removelayer(displayedStandardVideoOverlayBkg););
      removelayer(displayedStandardVideo);
    ,
      if (layer[displayedStandardVideo].started == false,
        set(layer[displayedStandardVideo].visible , true);
        if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, true););
        set(layer[displayedStandardVideoOverlay].visible , false);
        removelayer(displayedStandardVideoOverlayButton);
        removelayer(displayedStandardVideoOverlay);
        set(layer[displayedStandardVideo].started, true);
        if(layer[displayedStandardVideo].pausedonstart,
          if(layer[displayedStandardVideo].pausebgsound,
            pauseTourSoundsActions(true,true,false,true,true);
          );
        );
        layer[displayedStandardVideo].play();
        ifnot(tour_soundson,
          pauseVideoActionsSounds();
        );
      ,
        layer[displayedStandardVideo].stop();
        set(layer[displayedStandardVideo].visible , false);
        if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, false););resumeautorotation(forcehotspot);

        delete(tour_current_played_video);
        set(tour_current_played_video, null);
        set(tour_current_played_video_state, 0);
        if(layer[displayedStandardVideo].pausebgsound,
          resumeTourSoundsActions(true,true,true,true,true);
        );
        if(layer[displayedStandardVideo].overlay,removelayer(displayedStandardVideoOverlayBkg););
        removelayer(displayedStandardVideo);
      );
    );
  </action>
  <events name="displayedVideoObjectEvents" keep="true" onremovedisplayedobject="displayedVideoObjectOnRemoveDisplayedObject"/>
  <action name="displayedVideoObjectOnRemoveDisplayedObject">
    ifnot(layer[displayedStandardVideo].currentCall,
      if(layer[displayedStandardVideo].visible,
        layer[displayedStandardVideo].stop();
        ifnot(layer[displayedStandardVideo].fromdesktop,
          removelayer(displayedStandardVideoOverlayButton);
          removelayer(displayedStandardVideoOverlay);
        );
        set(layer[displayedStandardVideo].visible , false);
        if(layer[displayedStandardVideo].overlay,set(layer[displayedStandardVideoOverlayBkg].visible, false););resumeautorotation(forcehotspot);

        delete(tour_current_played_video);
        set(tour_current_played_video, null);
        set(tour_current_played_video_state, 0);
        if(layer[displayedStandardVideo].pausebgsound,
          resumeTourSoundsActions(true,true,true,true,true);
        );
        if(layer[displayedStandardVideo].overlay,removelayer(displayedStandardVideoOverlayBkg););
        removelayer(displayedStandardVideo);
      );
    );
  </action>

  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url="%SWFPATH%/graphics/soundinterface.swf"
          alturl="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if((scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true) OR scene[get(xml.scene)].video == false,
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

</krpano>